--[[ 
llock in #Lua
TODO:
- lock classes and non-table items
]]

function lock(obj, password)
    local lindex = function(table, index)
        if type(obj) == "class" then
            if rawget(obj, "lockinfo").locked then
                error("object is locked!")
            end
        else
            if getmetatable(obj).lockinfo.locked then
                error("object is locked!")
            end
        end
        return rawget(table, index)
    end

    local lnewindex = function(table, index, value)
        if type(obj) == "class" then
            if rawget(obj, "lockinfo").locked then
                error("object is locked!")
            end
        else
            if getmetatable(obj).lockinfo.locked then
                error("object is locked!")
            end
        end
        rawset(table, index, value)
    end

    local lcall = function(f, ...)
        if type(obj) == "class" then
            if rawget(obj, "lockinfo").locked then
                error("object is locked!")
            end
        else
            if getmetatable(obj).lockinfo.locked then
                error("object is locked!")
            end
        end
        f(unpack(arg))
    end
    
    local ldelete = function(self) 
        if type(obj) == "class" then
            if rawget(obj, "lockinfo").locked then
                error("object is locked!")
            end
        else
            if getmetatable(obj).lockinfo.locked then
                error("object is locked!")
            end
        end
        error("cannot remove object: object is locked!")
    end
    local linfo = { }
    linfo.locked = true
    linfo.__password = password
    
    if type(obj) == "class" then
        rawset(obj, "__index", lindex)
        rawset(obj, "__newindex", lnewindex)
        rawset(obj, "__call", lcall)
        rawset(obj, "__destructor", ldelete)
        rawset(obj, "lockinfo", linfo)
    else
        setmetatable(obj, { 
            __index = lindex,
            __newindex = lnewindex,
            __call = lcall,
            __destructor = ldelete,
        lockinfo = linfo})
    end
        
    return obj
end

function unlock(obj, password)
    if type(obj) == "class" then
        if rawget(obj, "lockinfo") == nil then error("object isn't locked!") end
        if rawget(obj, "lockinfo").locked == false then error("object isn't locked!") end
        if rawget(obj, "lockinfo").__password == password then
            -- remove password also
            rawset(obj, "lockinfo", { locked = false, __password = "" })
         else
             error("incorrect password!")
        end
    else
        
        if getmetatable(obj).lockinfo == nil then error("object isn't locked!") end
        if getmetatable(obj).lockinfo.locked == false then error("object isn't locked!") end
        if getmetatable(obj).lockinfo.__password == password then
            -- remove password also
            setmetatable(obj, { lockinfo = { locked = false, __password = "" }})
         else
             error("incorrect password!")
        end
    end
    return obj
end

--[[ test
t={}
t.hai = false
lock(t, "pwd")
t.thiswillfail = true     --> fail, locked object
t.hai = true              --> fail, even though already created
print(t.hai)              --> fail, locked object
unlock(t, "password")     --> fail, wrong password
unlock(t, "pwd")
]]