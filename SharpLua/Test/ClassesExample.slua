--[[
Class testing.
Tests for using parent objects directly,
how to set metamethods in classes,
and multiple inheritance
]]

-- you can create a class with calling the class table (class()) 
-- or calling the CreateClass method (class:CreateClass())
c=class()

-- #lua classes are a built-in type, but setting objects on them is easy.
-- you use a class like you would use a table:
c.Test = true
c.print = function(a) print(a) end

-- create another class, 
-- which will be a subclass of c
d = c:CreateSubclass()
-- because it inherited "c", it call all "c"'s methods
d.print("hello from d")
-- set a variable reference to _G
d.d = function() print"class d" end

-- the class library also supports multiple inheritance and 
-- if the first arg given is a table, it imports that into the class
e = class({v = "imported from a table" }, c, d)

-- see? it imports the tables objects, and both classes.
print(e.v)
e.print("hai")
e.d()

-- you cannot set class metamethods, so just set them as functions.
-- the real class metatable takes care of them.
-- do not bother returning values, as they are discarded.
e.__newindex = function(t, k, v) print(t, k, v) end
e.__index = function(table, index) print("getting " .. table .. " index: " .. index) end
e.__call = function() print"calling table e" end
-- #Lua also has 2 different automatic functions:
e.constructor = function() print"Created an instance of e" end
e.destructor = function(self) print"e is dying! :O" end

-- lets try these functions...
e.s="n00bz"
print(e.s)
e()
f = e:new()

destroy(f) -- uses class "e"'s destructor